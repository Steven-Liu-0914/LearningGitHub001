using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.CreditFile
{
    public class GetCreditFileAttachmentsTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetCreditFileAttachmentsTests()
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetCreditFileAttachments_ValidRequest_ReturnsAttachments()
        {
            // Arrange
            long validCreditFileId = 12345;

            // Act
            var response = await _client.GetAsync($"/api/creditfile/attachments?creditFileId={validCreditFileId}");

            // Assert
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetCreditFileAttachmentsResponse>();
            Assert.NotNull(result);
            Assert.Equal(validCreditFileId, result.CreditFileId);
            Assert.NotEmpty(result.Attachments);
        }

        [Fact]
        public async Task GetCreditFileAttachments_InvalidId_ReturnsNotFound()
        {
            // Arrange
            long invalidCreditFileId = -1;

            // Act
            var response = await _client.GetAsync($"/api/creditfile/attachments?creditFileId={invalidCreditFileId}");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetCreditFileAttachments_MissingId_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/creditfile/attachments");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
