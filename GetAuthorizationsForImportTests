#nullable disable

using CACIB.CREW.Api.Features.Simulation.Model;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class GetAuthorizationsForImportTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Get_Authorizations_For_Import_Success()
        {
            // Arrange: Provide valid parameters for the import search request
            var request = new ImportAuthorizationSearchRequest
            {
                Id = 12345,  // Example Simulation Id
                SortBy = "Date",
                IsAscending = true,
                PageSize = 10,
                PageIndex = 0
            };

            // Act: Send the GET request to the API
            var response = await _client.GetAsync(ApiRouteConstants.SimulationRoutes.GetAuthorizationForImport + $"?Id={request.Id}&SortBy={request.SortBy}&IsAscending={request.IsAscending}&PageSize={request.PageSize}&PageIndex={request.PageIndex}");

            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<ImportAuthorizationSearchResponse>(responseContent);

            // Assert: Check that the response status is 200 OK and validate the response data
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.True(respData.Authorizations.Count > 0);  // Assuming the response contains a list of authorizations
        }

        [Fact]
        public async Task Get_Authorizations_For_Import_BadRequest()
        {
            // Arrange: Provide invalid parameters (e.g., negative PageSize or PageIndex)
            var request = new ImportAuthorizationSearchRequest
            {
                Id = -1,  // Invalid Simulation Id
                SortBy = "Date",
                IsAscending = true,
                PageSize = -10, // Invalid Page Size
                PageIndex = -1 // Invalid Page Index
            };

            // Act: Send the GET request to the API
            var response = await _client.GetAsync(ApiRouteConstants.SimulationRoutes.GetAuthorizationForImport + $"?Id={request.Id}&SortBy={request.SortBy}&IsAscending={request.IsAscending}&PageSize={request.PageSize}&PageIndex={request.PageIndex}");

            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 400 Bad Request
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Bad Request", respError?.ErrorType); // Example error message
        }

        [Fact]
        public async Task Get_Authorizations_For_Import_NoResults()
        {
            // Arrange: Provide a Simulation Id that doesn't exist in the system
            var request = new ImportAuthorizationSearchRequest
            {
                Id = 99999,  // Non-existent Simulation Id
                SortBy = "Date",
                IsAscending = true,
                PageSize = 10,
                PageIndex = 0
            };

            // Act: Send the GET request to the API
            var response = await _client.GetAsync(ApiRouteConstants.SimulationRoutes.GetAuthorizationForImport + $"?Id={request.Id}&SortBy={request.SortBy}&IsAscending={request.IsAscending}&PageSize={request.PageSize}&PageIndex={request.PageIndex}");

            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<ImportAuthorizationSearchResponse>(responseContent);

            // Assert: Check that the response status is 200 OK but the response data contains no authorizations
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.Empty(respData.Authorizations);  // No authorizations should be returned
        }
    }
}
