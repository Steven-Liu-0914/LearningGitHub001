using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.UserAccess.Model.DTO;
using CACIB.CREW.Api.Features.UserAccess.Model.Response;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.UserAccess
{
    public class GetDeviceLevelAccessByUtCodeTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Get_DeviceLevelAccess_By_UtCode_Success_Response()
        {
            // Arrange
            string utCode = "ValidUtCode"; // Replace with a valid UT code available in the test data
            string requestUri = $"{ApiRouteConstants.UserAccessRoutes.GetDeviceLevelAccessByUtCode}?utCode={utCode}";

            // Act
            var response = await _client.GetAsync(requestUri);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<GetDeviceLevelAccessByUtCodeResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.NotNull(respData?.Data);
            Assert.True(respData.Data.Count > 0);
        }

        [Fact]
        public async Task Get_DeviceLevelAccess_By_UtCode_Validator_Failure()
        {
            // Arrange
            string requestUri = $"{ApiRouteConstants.UserAccessRoutes.GetDeviceLevelAccessByUtCode}?utCode=";

            // Act
            var response = await _client.GetAsync(requestUri);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.NotNull(respError);
            Assert.Equal("Validation Error", respError?.ErrorType);
        }
    }
}
