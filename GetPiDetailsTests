using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Calculation.Model.PI;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Calculation
{
    public class GetPiDetailsTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task GetPiDetails_Success()
        {
            // Arrange
            var request = new PiDetailRequest
            {
                Level = "Portfolio",
                PiId = 12345,
                IncludeDetails = true
            };
            var query = CreateQueryString(request);

            // Act
            var response = await _client.GetAsync($"{ApiRouteConstants.CalculationRoutes.GetPiDetails}?{query}");
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<PiDetailResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(result);
            Assert.NotEmpty(result.Items); // Adjust assertion based on `PiDetailResponse` structure
        }

        [Fact]
        public async Task GetPiDetails_BadRequest()
        {
            // Arrange
            var query = "Level=InvalidLevel&PiId=invalidId&IncludeDetails=true";

            // Act
            var response = await _client.GetAsync($"{ApiRouteConstants.CalculationRoutes.GetPiDetails}?{query}");
            var responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Contains("Validation Error", responseContent); // Adjust based on actual error message
        }

        [Fact]
        public async Task GetPiDetails_NotFound()
        {
            // Arrange
            var request = new PiDetailRequest
            {
                Level = "Portfolio",
                PiId = 99999, // Non-existent ID
                IncludeDetails = false
            };
            var query = CreateQueryString(request);

            // Act
            var response = await _client.GetAsync($"{ApiRouteConstants.CalculationRoutes.GetPiDetails}?{query}");
            var responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Contains("PI details not found", responseContent); // Adjust based on actual error message
        }

        private string CreateQueryString(PiDetailRequest request)
        {
            var queryParams = new List<string>
            {
                $"Level={request.Level}",
                $"PiId={request.PiId}",
                $"IncludeDetails={request.IncludeDetails.ToString().ToLower()}"
            };
            return string.Join("&", queryParams);
        }
    }
}
