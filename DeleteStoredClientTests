#nullable disable

using CACIB.CREW.Api.Core.Route;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.StoredClient
{
    public class DeleteStoredClientTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Delete_StoredClient_Success()
        {
            // Arrange: Provide valid stored client ID and type
            int clientId = 12345; // Example valid client ID
            string clientType = "Regular"; // Example valid client type

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.SimulationRoutes.DeleteStoredClient + $"?id={clientId}&type={clientType}");
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<BaseResponse>(responseContent);

            // Assert: Check that the response status is 200 OK and validate the response data
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            // Additional assertions can be made based on expected response values, e.g., checking if Data is true
            Assert.True(respData?.Data);
        }

        [Fact]
        public async Task Delete_StoredClient_NotFound()
        {
            // Arrange: Provide a non-existent stored client ID and type
            int clientId = 99999; // Example non-existent client ID
            string clientType = "NonExistent"; // Example non-existent client type

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.SimulationRoutes.DeleteStoredClient + $"?id={clientId}&type={clientType}");
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 400 BadRequest or another error code depending on logic
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Bad Request", respError?.ErrorType);
        }

        [Fact]
        public async Task Delete_StoredClient_BadRequest()
        {
            // Arrange: Provide an invalid stored client ID or type
            int clientId = -1; // Example invalid client ID (negative value)
            string clientType = ""; // Example invalid client type (empty string)

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.SimulationRoutes.DeleteStoredClient + $"?id={clientId}&type={clientType}");
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 400 BadRequest due to invalid parameters
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Bad Request", respError?.ErrorType);
        }
    }
}
