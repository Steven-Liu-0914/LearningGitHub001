using CACIB.CREW.Api.Features.StoredClient.Model;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Net.Http.Json;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.StoredClient
{
    public class GetStoredClientTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Get_StoredClient_Success_Response()
        {
            // Arrange
            long clientId = 1234567890; // Replace with an actual client ID
            string requestUri = $"{ApiRouteConstants.StoredClientRoutes.StoredClient}?clientId={clientId}";

            // Act
            var response = await _client.GetAsync(requestUri);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<GetStoredClientResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.NotNull(respData?.ClientDetails); // Assuming `ClientDetails` is the data returned in response
            Assert.True(respData.ClientDetails.Count > 0); // Ensure data is returned
        }

        [Fact]
        public async Task Get_StoredClient_Validator_Failure()
        {
            // Arrange
            string requestUri = $"{ApiRouteConstants.StoredClientRoutes.StoredClient}?clientId=-1"; // Invalid client ID

            // Act
            var response = await _client.GetAsync(requestUri);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.NotNull(respError);
            Assert.Equal("Validation Error", respError?.ErrorType);
            Assert.Contains("clientId", respError?.Errors.Keys); // Ensure "clientId" validation is reported
        }
    }
}
