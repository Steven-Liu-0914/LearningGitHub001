using CACIB.CREW.Api.Features.SimulationAccess.Model;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.SimulationAccess
{
    public class UpdateSimulationAccessTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Post_UpdateSimulationAccess_Success_Response()
        {
            // Arrange
            var simulationAccessRequest = new UpdateSimulationAccessRequest
            {
                SimulationId = 1234567890, // Example simulation ID
                Items = new List<UpdateSimulationAccessDto>
                {
                    new UpdateSimulationAccessDto
                    {
                        UtCode = "ABC123",
                        FirstName = "John",
                        LastName = "Doe",
                        Rights = "Read"
                    }
                    // Add more users if needed
                }
            };

            var requestUri = "/api/simulation-access";  // Adjust the route based on your actual API

            // Act
            var response = await _client.PostAsJsonAsync(requestUri, simulationAccessRequest);
            var responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<UpdateSimulationAccessResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.True(respData?.IsSuccess);  // Assuming the response has an IsSuccess property
        }

        [Fact]
        public async Task Post_UpdateSimulationAccess_Validator_Failure()
        {
            // Arrange
            var simulationAccessRequest = new UpdateSimulationAccessRequest
            {
                SimulationId = -1, // Invalid simulation ID
                Items = new List<UpdateSimulationAccessDto>
                {
                    new UpdateSimulationAccessDto
                    {
                        UtCode = "ABC123",
                        FirstName = "", // Invalid data (empty first name)
                        LastName = "Doe",
                        Rights = "Read"
                    }
                    // Add more invalid users if needed
                }
            };

            var requestUri = "/api/simulation-access";  // Adjust the route based on your actual API

            // Act
            var response = await _client.PostAsJsonAsync(requestUri, simulationAccessRequest);
            var responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.NotNull(respError);
            Assert.Equal("Validation Error", respError?.ErrorType);
            Assert.Contains("FirstName", respError?.Errors.Keys); // Ensure "FirstName" validation is triggered
        }
    }
}
