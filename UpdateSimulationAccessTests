using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.SimulationAccess
{
    public class UpdateSimulationAccessTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public UpdateSimulationAccessTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task UpdateSimulationAccess_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new UpdateSimulationAccessRequest
            {
                SimulationId = 12345, // Example valid simulation ID
                Items = new List<UpdateSimulationAccessDto>
                {
                    new UpdateSimulationAccessDto
                    {
                        UtCode = "UT123",
                        FirstName = "John",
                        LastName = "Doe",
                        Rights = "Read" // Example access rights
                    },
                    new UpdateSimulationAccessDto
                    {
                        UtCode = "UT456",
                        FirstName = "Jane",
                        LastName = "Smith",
                        Rights = "Write" // Example access rights
                    }
                }
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/simulationaccess", request);

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<UpdateSimulationAccessResponse>();
            Assert.NotNull(result);
            Assert.True(result.IsSuccess); // Assuming the response has an IsSuccess flag indicating success
        }

        [Fact]
        public async Task UpdateSimulationAccess_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdateSimulationAccessRequest
            {
                SimulationId = 0,  // Invalid simulation ID (assumed invalid)
                Items = new List<UpdateSimulationAccessDto>
                {
                    new UpdateSimulationAccessDto
                    {
                        UtCode = "", // Invalid UTCode (empty)
                        FirstName = "", // Invalid first name (empty)
                        LastName = "", // Invalid last name (empty)
                        Rights = "" // Invalid rights (empty)
                    }
                }
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/simulationaccess", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task UpdateSimulationAccess_SimulationIdNotFound_ReturnsNotFound()
        {
            // Arrange
            var request = new UpdateSimulationAccessRequest
            {
                SimulationId = 99999,  // Assuming no simulation with this ID exists
                Items = new List<UpdateSimulationAccessDto>
                {
                    new UpdateSimulationAccessDto
                    {
                        UtCode = "UT123",
                        FirstName = "John",
                        LastName = "Doe",
                        Rights = "Read"
                    }
                }
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/simulationaccess", request);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task UpdateSimulationAccess_MissingRequiredFields_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdateSimulationAccessRequest
            {
                SimulationId = 12345,  // Valid simulation ID
                Items = new List<UpdateSimulationAccessDto>
                {
                    new UpdateSimulationAccessDto
                    {
                        UtCode = "UT123",
                        FirstName = "", // Missing or empty first name
                        LastName = "Doe",
                        Rights = "Read"
                    }
                }
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/simulationaccess", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
