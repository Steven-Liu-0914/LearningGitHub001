#nullable disable

using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Simulation.Model;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class DuplicateSimulationAuthorizationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Duplicate_Simulation_Authorization_Success()
        {
            // Arrange: Provide valid request data for the duplicate authorization
            var requestBody = new DuplicateSimulationAuthorizationRequest
            {
                SimulationId = 12345, // Example valid simulation ID
                AuthorizationType = "Standard" // Example valid authorization type
            };

            var command = new DuplicateSimulationAuthorizationCommand(requestBody);

            // Act: Send the POST request to the API
            var response = await _client.PostAsync(ApiRouteConstants.SimulationRoutes.DuplicateAuthorization,
                new StringContent(JsonConvert.SerializeObject(command), System.Text.Encoding.UTF8, "application/json"));

            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<DuplicateSimulationAuthorizationResponse>(responseContent);

            // Assert: Check that the response status is 200 OK and validate the response data
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.True(respData?.IsDuplicated); // Assuming IsDuplicated is a boolean property in the response indicating success
        }

        [Fact]
        public async Task Duplicate_Simulation_Authorization_NotFound()
        {
            // Arrange: Provide a non-existent simulation ID
            var requestBody = new DuplicateSimulationAuthorizationRequest
            {
                SimulationId = 99999, // Example non-existent simulation ID
                AuthorizationType = "Premium" // Example valid authorization type
            };

            var command = new DuplicateSimulationAuthorizationCommand(requestBody);

            // Act: Send the POST request to the API
            var response = await _client.PostAsync(ApiRouteConstants.SimulationRoutes.DuplicateAuthorization,
                new StringContent(JsonConvert.SerializeObject(command), System.Text.Encoding.UTF8, "application/json"));

            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 404 Not Found
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal("Simulation Authorization Not Found", respError?.ErrorType); // Example error message
        }

        [Fact]
        public async Task Duplicate_Simulation_Authorization_BadRequest()
        {
            // Arrange: Provide invalid data (e.g., empty authorization type)
            var requestBody = new DuplicateSimulationAuthorizationRequest
            {
                SimulationId = -1, // Example invalid simulation ID (negative value)
                AuthorizationType = "" // Example invalid authorization type (empty string)
            };

            var command = new DuplicateSimulationAuthorizationCommand(requestBody);

            // Act: Send the POST request to the API
            var response = await _client.PostAsync(ApiRouteConstants.SimulationRoutes.DuplicateAuthorization,
                new StringContent(JsonConvert.SerializeObject(command), System.Text.Encoding.UTF8, "application/json"));

            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 400 BadRequest due to invalid parameters
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Bad Request", respError?.ErrorType); // Example error message
        }
    }
}
