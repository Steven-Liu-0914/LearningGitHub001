using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Mitigants
{
    public class GetMitigantsTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetMitigantsTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetMitigants_ValidParameters_ReturnsMitigantsList()
        {
            // Arrange
            var request = new 
            {
                AuthorizationId = 12345,
                DeviceId = 67890,
                ExcludeLinkedMitigants = false,
                SortBy = "Id",
                IsAscending = true,
                PageSize = 10,
                PageIndex = 0
            };

            // Act
            var response = await _client.GetAsync($"/api/mitigants?authorizationId={request.AuthorizationId}&deviceId={request.DeviceId}&excludeLinkedMitigants={request.ExcludeLinkedMitigants}&sortBy={request.SortBy}&isAscending={request.IsAscending}&pageSize={request.PageSize}&pageIndex={request.PageIndex}");

            // Assert
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetMitigantsResponse>();
            Assert.NotNull(result);
            Assert.NotEmpty(result.Mitigants);
        }

        [Fact]
        public async Task GetMitigants_InvalidAuthorizationId_ReturnsNotFound()
        {
            // Arrange
            var invalidAuthorizationId = 999999;

            // Act
            var response = await _client.GetAsync($"/api/mitigants?authorizationId={invalidAuthorizationId}&deviceId=67890");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetMitigants_MissingParameters_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/mitigants");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
