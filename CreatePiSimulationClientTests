using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Simulation.Model;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class CreatePiSimulationClientTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Create_PiSimulationClient_Success()
        {
            var request = new PiSimulationClientRequest
            {
                // Populate with valid request data
            };

            var jsonContent = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await _client.PostAsync(ApiRouteConstants.SimulationPiRoutes.CreatePiSimulationClient, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<BaseResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            // Add more specific assertions for the response data, e.g., checking if response contains expected fields
        }

        [Fact]
        public async Task Create_PiSimulationClient_Validation_Failure()
        {
            var invalidRequest = new PiSimulationClientRequest
            {
                // Populate with invalid data (e.g., missing required fields or incorrect format)
            };

            var jsonContent = JsonConvert.SerializeObject(invalidRequest);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await _client.PostAsync(ApiRouteConstants.SimulationPiRoutes.CreatePiSimulationClient, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Validation Error", respError?.ErrorType);
        }

        [Fact]
        public async Task Create_PiSimulationClient_NotFound()
        {
            var request = new PiSimulationClientRequest
            {
                // Populate with valid request data that leads to a not found scenario
            };

            var jsonContent = JsonConvert.SerializeObject(request);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await _client.PostAsync(ApiRouteConstants.SimulationPiRoutes.CreatePiSimulationClient, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal("Resource not found", respError?.ErrorType);
        }
    }
}
