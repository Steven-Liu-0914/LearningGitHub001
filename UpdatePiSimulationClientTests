using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class UpdatePiSimulationClientTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public UpdatePiSimulationClientTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task UpdatePiSimulationClient_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new PiSimulationClientRequest
            {
                ClientId = 12345, // Example valid client ID
                ClientName = "New Client Name", // Example valid client name
                ClientDetails = "Updated client details" // Example valid client details
            };

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/simulationclient", request);

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<UpdatePiSimulationClientResponse>();
            Assert.NotNull(result);
            Assert.True(result.IsSuccess); // Assuming the response has an IsSuccess flag indicating success
        }

        [Fact]
        public async Task UpdatePiSimulationClient_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new PiSimulationClientRequest
            {
                ClientId = 0,  // Invalid client ID (assumed invalid)
                ClientName = "", // Invalid name (empty)
                ClientDetails = "" // Invalid details (empty)
            };

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/simulationclient", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task UpdatePiSimulationClient_SimulationClientNotFound_ReturnsNotFound()
        {
            // Arrange
            var request = new PiSimulationClientRequest
            {
                ClientId = 99999,  // Assuming no simulation client with this ID exists
                ClientName = "Client Name",
                ClientDetails = "Client details"
            };

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/simulationclient", request);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task UpdatePiSimulationClient_MissingRequiredFields_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new PiSimulationClientRequest
            {
                ClientId = 12345,  // Valid client ID
                ClientName = "" // Missing or empty client name
            };

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/simulationclient", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
