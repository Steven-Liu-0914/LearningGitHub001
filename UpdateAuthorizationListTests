using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class UpdateAuthorizationListTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public UpdateAuthorizationListTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task UpdateAuthorizationList_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new UpdateAuthorizationListRequest
            {
                AuthorizationList = new List<AuthorizationItem>  // Example of authorization list to update
                {
                    new AuthorizationItem
                    {
                        AuthorizationId = 12345,
                        Status = "Approved",
                        AuthorizationValue = 50000
                    },
                    new AuthorizationItem
                    {
                        AuthorizationId = 67890,
                        Status = "Pending",
                        AuthorizationValue = 30000
                    }
                }
            };

            // Act
            var response = await _client.PostAsJsonAsync("/api/simulation/update-authorization-list", request);

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<UpdateAuthorizationListResponse>();
            Assert.NotNull(result);
            Assert.True(result.IsSuccess); // Assuming the response has an IsSuccess flag
        }

        [Fact]
        public async Task UpdateAuthorizationList_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdateAuthorizationListRequest
            {
                AuthorizationList = new List<AuthorizationItem>  // Invalid item (missing AuthorizationId)
                {
                    new AuthorizationItem
                    {
                        AuthorizationId = 0,  // Invalid AuthorizationId
                        Status = "InvalidStatus",
                        AuthorizationValue = -50000  // Invalid value
                    }
                }
            };

            // Act
            var response = await _client.PostAsJsonAsync("/api/simulation/update-authorization-list", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task UpdateAuthorizationList_MissingRequiredFields_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdateAuthorizationListRequest
            {
                AuthorizationList = new List<AuthorizationItem>() // Empty list should trigger validation error
            };

            // Act
            var response = await _client.PostAsJsonAsync("/api/simulation/update-authorization-list", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
