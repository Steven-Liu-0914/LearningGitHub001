 static Tuple<KafkaSettings, ConsumerConfig> GetUnicornConsumerBySetting(IConfiguration config)
 {
     KafkaSettings setting = new();
     config.GetRequiredSection("Kafka-XGit").Bind(setting);
     return new Tuple<KafkaSettings, ConsumerConfig>(setting,
         new ConsumerConfig
         {
             BootstrapServers = setting.BootstrapServers,
             SaslKerberosServiceName = setting.ServiceName,
             GroupId = setting.GroupId,
             AutoOffsetReset = AutoOffsetReset.Latest,
             SecurityProtocol = SecurityProtocol.SaslSsl,
             SaslMechanism = SaslMechanism.Gssapi,
             SslCaLocation = "",
             Debug = setting.DebugMode,
             EnableSslCertificateVerification = setting.EnableSslCertificateVerification,
             EnableAutoCommit = true,
             StatisticsIntervalMs = 10000,
             SessionTimeoutMs = 10000,
             EnablePartitionEof = setting.EnablePartitionEof,
             PartitionAssignmentStrategy = PartitionAssignmentStrategy.Range,
         });
 }
 #endregion


  public static void AddConsumers(this WebApplicationBuilder builder)
  {
      if (builder.Configuration.GetValue<bool>("Kafka-XGit:EnableConsumers"))
      {
          Tuple<KafkaSettings, ConsumerConfig> appConfig = KafkaConfigurationHelper.GetConsumerConfiguration(builder.Configuration, KafkaServiceType.UnicornXGit);

          builder.Services.AddMassTransit<IRefreshXGitBusControl>(x =>
          {
              x.UsingInMemory((context, cfg) => cfg.ConfigureEndpoints(context));
              x.AddRider(riderCfg =>
              {
                  riderCfg.AddConsumer<RefreshXGitCpyConsumer>();
                  riderCfg.UsingKafka((context, kafkaCfg) =>
                  {
                      kafkaCfg.Host(builder.Configuration.GetValue<string>("Kafka-XGit:BootstrapServers"));
                      kafkaCfg.SetSerializationFactory(new CustomKafkaXmlSerializerFactory<BODY>(new ContentType(@"application/xml")));
                      kafkaCfg.TopicEndpoint<Ignore, BODY>(appConfig.Item1.Topic, appConfig.Item2, topicCfg =>
                      {
                          topicCfg.ConcurrentMessageLimit = appConfig.Item1.ConcurrentMessageLimit;
                          topicCfg.EnablePartitionEof = appConfig.Item1.EnablePartitionEof;
                          topicCfg.SetKeyDeserializer(Deserializers.Ignore);
                          UseRetryConfiguration(topicCfg);
                          topicCfg.ConfigureConsumer<RefreshXGitCpyConsumer>(context);
                      });
                  });
              });
          });
      }
  }
