using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Beneficiary.Model;
using CREW.Core.Models.Response;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Threading.Tasks;

namespace CACIB.CREW.IntegrationTests.Features.Beneficiary
{
    public class SearchKycTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Search_Kyc_Success_Response()
        {
            // Arrange
            var queryParams = "?kycId=12345&legalName=JohnDoe&sortBy=name&isAscending=true&pageIndex=0&pageSize=10";

            // Act
            var response = await _client.GetAsync(ApiRouteConstants.BeneficiaryRoutes.SearchKyc + queryParams);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<FilterableReferentialResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.True(respData?.Data.Count > 0); // Adjust based on actual response structure
        }

        [Fact]
        public async Task Search_Kyc_NotFound_Response()
        {
            // Arrange
            var queryParams = "?kycId=0&legalName=Unknown";

            // Act
            var response = await _client.GetAsync(ApiRouteConstants.BeneficiaryRoutes.SearchKyc + queryParams);
            string responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.True(string.IsNullOrEmpty(responseContent));
        }

        [Fact]
        public async Task Search_Kyc_BadRequest_Response()
        {
            // Arrange
            var queryParams = "?kycId=&legalName=&sortBy=&isAscending=&pageIndex=&pageSize="; // Missing required parameters

            // Act
            var response = await _client.GetAsync(ApiRouteConstants.BeneficiaryRoutes.SearchKyc + queryParams);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.NotNull(respError);
            Assert.Equal("Validation Error", respError?.ErrorType); // Adjust based on actual error structure
        }
    }
}
