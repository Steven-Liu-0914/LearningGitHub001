using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Calculation.Model;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Calculation
{
    public class EclReportTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task GetEclReport_Success()
        {
            // Arrange
            var request = new EclReportRequest
            {
                CalculationId = 12345,
                ReportType = "Detailed",
                IncludeDetails = true
            };
            var query = CreateQueryString(request);

            // Act
            var response = await _client.GetAsync($"{ApiRouteConstants.CalculationRoutes.GetEclReport}?{query}");
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<EclReportResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(result);
            Assert.NotEmpty(result.ReportData);
        }

        [Fact]
        public async Task GetEclReport_BadRequest()
        {
            // Arrange
            var query = "CalculationId=invalidId&ReportType=Summary&IncludeDetails=true";

            // Act
            var response = await _client.GetAsync($"{ApiRouteConstants.CalculationRoutes.GetEclReport}?{query}");
            var responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Contains("Validation Error", responseContent); // Adjust based on actual error message
        }

        [Fact]
        public async Task GetEclReport_NotFound()
        {
            // Arrange
            var request = new EclReportRequest
            {
                CalculationId = 99999, // Non-existent ID
                ReportType = "Summary",
                IncludeDetails = false
            };
            var query = CreateQueryString(request);

            // Act
            var response = await _client.GetAsync($"{ApiRouteConstants.CalculationRoutes.GetEclReport}?{query}");
            var responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Contains("ECL report not found", responseContent); // Adjust based on actual error message
        }

        private string CreateQueryString(EclReportRequest request)
        {
            var queryParams = new List<string>
            {
                $"CalculationId={request.CalculationId}",
                $"ReportType={request.ReportType}",
                $"IncludeDetails={request.IncludeDetails.ToString().ToLower()}"
            };
            return string.Join("&", queryParams);
        }
    }
}
