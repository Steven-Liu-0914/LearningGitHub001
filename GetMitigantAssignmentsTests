using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Mitigants
{
    public class GetMitigantAssignmentsTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetMitigantAssignmentsTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetMitigantAssignments_ValidRequest_ReturnsAssignmentsList()
        {
            // Arrange
            var validRequest = new
            {
                MitigantId = 12345,
                DeviceId = 67890,
                AuthorizationId = 1,
                SortBy = "id",
                IsAscending = true,
                PageSize = 20,
                PageIndex = 0
            };

            // Act
            var response = await _client.GetAsync($"/api/mitigants/assignments?MitigantId={validRequest.MitigantId}&DeviceId={validRequest.DeviceId}&AuthorizationId={validRequest.AuthorizationId}&SortBy={validRequest.SortBy}&IsAscending={validRequest.IsAscending}&PageSize={validRequest.PageSize}&PageIndex={validRequest.PageIndex}");

            // Assert
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetMitigantAssignmentsResponse>();
            Assert.NotNull(result);
            Assert.True(result.Assignments.Count > 0); // Assuming it returns a list of assignments
        }

        [Fact]
        public async Task GetMitigantAssignments_InvalidMitigantId_ReturnsNotFound()
        {
            // Arrange
            long invalidMitigantId = 999999;

            // Act
            var response = await _client.GetAsync($"/api/mitigants/assignments?MitigantId={invalidMitigantId}");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetMitigantAssignments_MissingParameters_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/mitigants/assignments");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
