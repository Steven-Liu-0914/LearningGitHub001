using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.CreditFile
{
    public class SearchCreditFileTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public SearchCreditFileTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task SearchCreditFile_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new SearchCreditFileRequest
            {
                Key = "testKey",  // Example search key
                SearchFileName = true,
                SearchBeneficiary = true,
                SearchDealId = false,
                StartDate = DateTime.Now.AddDays(-30),
                EndDate = DateTime.Now,
                SortBy = "FileName",
                IsAscending = true,
                PageSize = 10,
                PageIndex = 1
            };

            // Act
            var response = await _client.GetAsync($"/api/credit-file/search?key={request.Key}&searchFileName={request.SearchFileName}&searchBeneficiary={request.SearchBeneficiary}&searchDealId={request.SearchDealId}&startDate={request.StartDate:yyyy-MM-dd}&endDate={request.EndDate:yyyy-MM-dd}&sortBy={request.SortBy}&isAscending={request.IsAscending}&pageSize={request.PageSize}&pageIndex={request.PageIndex}");

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<SearchCreditFileResponse>();
            Assert.NotNull(result);
            Assert.True(result.TotalCount > 0); // Assuming SearchCreditFileResponse has a TotalCount property
        }

        [Fact]
        public async Task SearchCreditFile_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new SearchCreditFileRequest
            {
                Key = "",  // Invalid key
                SearchFileName = true,
                SearchBeneficiary = true,
                SearchDealId = false,
                StartDate = DateTime.Now.AddDays(30), // Future date
                EndDate = DateTime.Now,
                SortBy = "FileName",
                IsAscending = true,
                PageSize = 10,
                PageIndex = 1
            };

            // Act
            var response = await _client.GetAsync($"/api/credit-file/search?key={invalidRequest.Key}&searchFileName={invalidRequest.SearchFileName}&searchBeneficiary={invalidRequest.SearchBeneficiary}&searchDealId={invalidRequest.SearchDealId}&startDate={invalidRequest.StartDate:yyyy-MM-dd}&endDate={invalidRequest.EndDate:yyyy-MM-dd}&sortBy={invalidRequest.SortBy}&isAscending={invalidRequest.IsAscending}&pageSize={invalidRequest.PageSize}&pageIndex={invalidRequest.PageIndex}");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task SearchCreditFile_MissingRequiredParams_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/credit-file/search");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
