using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class SearchSimulationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public SearchSimulationTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task SearchSimulation_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new SearchSimulationRequest
            {
                Name = "Test Simulation",  // Example simulation name
                SortBy = "Name",  // Sort by simulation name
                IsAscending = true,  // Sort in ascending order
                PageSize = 10,
                PageIndex = 1,
                SimulationType = "Credit Simulation",
                BeneficiaryId = 12345,
                BeneficiaryType = "Individual"
            };

            // Act
            var response = await _client.GetAsync($"/api/simulation/search?name={request.Name}&sortBy={request.SortBy}&isAscending={request.IsAscending}&pageSize={request.PageSize}&pageIndex={request.PageIndex}&simulationType={request.SimulationType}&beneficiaryId={request.BeneficiaryId}&beneficiaryType={request.BeneficiaryType}");

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<SearchSimulationResponse>();
            Assert.NotNull(result);
            Assert.True(result.TotalCount > 0); // Assuming SearchSimulationResponse has a TotalCount property
        }

        [Fact]
        public async Task SearchSimulation_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new SearchSimulationRequest
            {
                Name = "",  // Invalid name
                SortBy = "InvalidField",  // Invalid sort field
                IsAscending = true,
                PageSize = 10,
                PageIndex = 1,
                SimulationType = "InvalidType",  // Invalid simulation type
                BeneficiaryId = -1,  // Invalid beneficiary ID
                BeneficiaryType = "Unknown"  // Invalid beneficiary type
            };

            // Act
            var response = await _client.GetAsync($"/api/simulation/search?name={invalidRequest.Name}&sortBy={invalidRequest.SortBy}&isAscending={invalidRequest.IsAscending}&pageSize={invalidRequest.PageSize}&pageIndex={invalidRequest.PageIndex}&simulationType={invalidRequest.SimulationType}&beneficiaryId={invalidRequest.BeneficiaryId}&beneficiaryType={invalidRequest.BeneficiaryType}");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task SearchSimulation_MissingRequiredParams_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/simulation/search");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
