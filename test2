import { NgComponentOutlet } from '@angular/common';
import {
  ChangeDetectionStrategy,
  Component,
  computed,
  inject,
  input,
  OnInit,
  signal,
} from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatIconModule } from '@angular/material/icon';
import { MatMenuModule } from '@angular/material/menu';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatTabsModule } from '@angular/material/tabs';
import { RouterLink } from '@angular/router';
import { injectExchangeRateGetQuery } from '@crew/shared/api/index';
import { EngineAnomaliesComponent } from '@crew/shared/dialog';
import { DynamicTab } from '@crew/shared/model';
import { AddNullishOptionPipe } from '@crew/shared/pipes';
import {
  AsFormControlDirective,
  AutocompleteFieldComponent,
  DialogContentDirective,
  DialogPortalDirective,
  FormFieldComponent,
  InputFieldComponent,
  LoaderDirective,
  NumberInputFieldComponent,
  SelectFieldComponent,
} from '@crew/shared/ui';
import { typeSafeObjectKeys } from '@crew/shared/util-common';

import {
  injectPiSimulationDuplicateCommand,
  injectPiSimulationGetQuery,
  injectPiSimulationUpdateCommand,
} from '../../api';
import { toUpdateSimulationPiDto } from '../../model';
import { PiSimulationStore } from '../../store';
import { DuplicateSimulationDialogComponent } from '../../ui';
import { AuthorizationListComponent } from './authorization-list/authorization-list.component';
import { MitigantsListComponent } from './mitigants-list/mitigants-list.component';
import { PiClientsComponent } from './pi-clients/pi-clients.component';

type PiSimulationTabKey =
  | 'hasClient'
  | 'hasAuthorization'
  | 'hasMitigant'
  | 'hasSyndication'
  | 'hasCovenant'
  | 'hasProjectSLId'
  | 'hasAsset';

@Component({
  selector: 'crew-pi-simulation',
  standalone: true,
  imports: [
    AddNullishOptionPipe,
    AsFormControlDirective,
    AutocompleteFieldComponent,
    DuplicateSimulationDialogComponent,
    DialogPortalDirective,
    DialogContentDirective,
    FormFieldComponent,
    InputFieldComponent,
    NumberInputFieldComponent,
    LoaderDirective,
    MatButtonModule,
    MatCardModule,
    MatExpansionModule,
    MatIconModule,
    ReactiveFormsModule,
    SelectFieldComponent,
    MatTabsModule,
    MatMenuModule,
    NgComponentOutlet,
    RouterLink,
    EngineAnomaliesComponent,
  ],
  templateUrl: './pi-simulation.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class PiSimulationComponent implements OnInit {
  id = input<number>(-1);
  #store = inject(PiSimulationStore);
  #snackBar = inject(MatSnackBar);

  #referentials = this.#store.piSimulationReferentials.referentials;
  isReferentialsFetching = this.#store.isReferentialsFetching;
  isReferentialsError = this.#store.isReferentialsError;
  calculationInfo = this.#store.piSimulationCalculation;
  currencyList = this.#referentials.currencyList;
  fileName = this.#store.fileName;
  description = this.#store.description;
  deviceId = this.#store.deviceId;
  hasEngineAnomalies = signal(true);
  isEngineAnomaliesOpened = signal(false);
  selectedCurrencyPISimulation = this.#store.currency;
  simulPiDetailsForm = this.#store.simulPiDetailsForm();
  isReadOnly = this.#store.isReadOnly;
  isFormInValid = this.#store.isFormInValid;

  calculationResult = this.#store.calculationResult;
  calculationError = [''];

  isDuplicateSimulationOpened = signal(false);
  piSimulationGetQuery = injectPiSimulationGetQuery(
    this.id,
    this.isReferentialsFetching,
  );
  piSimulationDuplicateCommand = injectPiSimulationDuplicateCommand();
  piSimulationUpdateCommand = injectPiSimulationUpdateCommand();
  getExchangeRateQuery = injectExchangeRateGetQuery(
    this.#store.getExchangeRateDto,
    {
      isCurrencyPristine: this.#store.isCurrencyPristine,
      isAmountPristine: this.#store.isAmountPristine,
    },
  );

  emptyInput = () => undefined;
  piSimulationTabMap: { [key in PiSimulationTabKey]: DynamicTab } = {
    hasClient: {
      title: 'Client',
      component: PiClientsComponent,
      inputs: this.emptyInput,
    },
    hasAuthorization: {
      title: 'Authorization',
      component: AuthorizationListComponent,
      inputs: this.emptyInput,
    },
    hasMitigant: {
      title: 'Mitigant',
      component: MitigantsListComponent,
      inputs: computed(() => {
        return {
          piId: this.id(),
          deviceId: this.piSimulationGetQuery.data()?.data.deviceId,
        };
      }),
    },
    hasSyndication: {
      title: 'Syndication',
      component: null,
      inputs: this.emptyInput,
    },
    hasCovenant: {
      title: 'Covenant',
      component: null,
      inputs: this.emptyInput,
    },
    hasProjectSLId: {
      title: 'Project / SL',
      component: null,
      inputs: this.emptyInput,
    },
    hasAsset: { title: 'Asset', component: null, inputs: this.emptyInput },
  };

  tabState = computed(() => {
    const response = this.piSimulationGetQuery.data();
    const keys = typeSafeObjectKeys(this.piSimulationTabMap);
    if (!response)
      return {
        existingTabs: signal([] as DynamicTab[]),
      };
    const data = response.data;
    return {
      existingTabs: signal(
        keys
          .filter((key) => {
            return data[key];
          })
          .map((key) => {
            return this.piSimulationTabMap[key];
          }),
      ),
    };
  });

  remainingMenus = computed(() =>
    Object.values(this.piSimulationTabMap).filter(
      (v) => !this.tabState().existingTabs().includes(v),
    ),
  );

  selectedIndex = signal(0);
  noMenus = computed(() => this.remainingMenus().length === 0);

  showSnackBar = (message: string, duration?: number) => {
    this.#snackBar.open(message, 'OK', {
      horizontalPosition: 'right',
      verticalPosition: 'top',
      duration: duration,
    });
  };

  async onMenuSelected(menu: DynamicTab) {
    if (
      menu.title === 'Authorization' &&
      !this.piSimulationGetQuery.data()?.data.hasAuthorization
    ) {
      await this.#store.goToCreateAuthorization();
    }
    this.tabState().existingTabs.update((current) => [...current, menu]);
    this.selectedIndex.set(this.tabState().existingTabs().length - 1);
  }

  toggleEngineAnomaliesDialog() {
    this.isEngineAnomaliesOpened.update((isOpened) => !isOpened);
  }

  ngOnInit(): void {
    void this.#store.loadPiSimulationReferentials();
    this.#store.syncSimulPiDetailsForm(this.piSimulationGetQuery.data);
    this.#store.syncExchangeRate(this.getExchangeRateQuery.data);
    void this.#store
      .getCalculationResult(this.deviceId() ?? 0)
      .then(() => this.updateCalculationError());
  }

  updateCalculationError() {
    const error = this.calculationResult.simulation_error()?.error;
    this.calculationError = error?.split('-') ?? [''];
  }

  async onDuplicateConfirm(creditFileName: string | null) {
    const id = this.id();
    if (creditFileName && id) {
      const response = await this.piSimulationDuplicateCommand.mutateAsync({
        simulationId: id,
        name: creditFileName,
      });
      this.isDuplicateSimulationOpened.set(false);
      await this.#store.reloadRouteId(response.value);
    } else {
      this.isDuplicateSimulationOpened.set(false);
    }
  }

  async updatePiSimulation() {
    const id = this.id();
    if (id) {
      try {
        await this.piSimulationUpdateCommand.mutateAsync(
          toUpdateSimulationPiDto(id, this.simulPiDetailsForm.getRawValue()),
        );
        this.showSnackBar('Save Simulation Details Successful', 5000);
      } catch (e) {
        this.showSnackBar(
          'Save Simulation Details Failed - ' + (e as Error).message,
          5000,
        );
      }
    }
  }
}
