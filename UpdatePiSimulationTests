using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class UpdatePiSimulationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public UpdatePiSimulationTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task UpdatePiSimulation_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new UpdatePiSimulationRequest
            {
                Name = "Updated Simulation Name",
                Description = "Updated Description",
                Amount = 100000,
                Currency = "USD",
                ExchangeRate = 1.2M
            };

            long simulationId = 12345; // Assuming we are updating simulation with this ID

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/{simulationId}", request);

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<UpdatePiSimulationResponse>();
            Assert.NotNull(result);
            Assert.True(result.IsSuccess); // Assuming the response has an IsSuccess flag
        }

        [Fact]
        public async Task UpdatePiSimulation_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdatePiSimulationRequest
            {
                Name = "",  // Empty Name, should be invalid
                Description = "Invalid Simulation",
                Amount = -1000,  // Negative Amount, should be invalid
                Currency = "USD",
                ExchangeRate = 0.5M
            };

            long simulationId = 12345; // Assuming we are updating simulation with this ID

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/{simulationId}", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task UpdatePiSimulation_SimulationNotFound_ReturnsNotFound()
        {
            // Arrange
            var request = new UpdatePiSimulationRequest
            {
                Name = "Non-Existing Simulation",
                Description = "Description for a non-existing simulation",
                Amount = 1000,
                Currency = "USD",
                ExchangeRate = 1.1M
            };

            long simulationId = 99999; // Assuming no simulation with this ID exists

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/{simulationId}", request);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task UpdatePiSimulation_MissingRequiredFields_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdatePiSimulationRequest
            {
                Name = "Valid Name",
                Amount = 0, // Missing Amount or invalid
                Currency = "USD"
            };

            long simulationId = 12345; // Assuming we are updating simulation with this ID

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/pi/{simulationId}", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
