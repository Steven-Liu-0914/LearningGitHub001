using CACIB.CREW.Api.Features.StringResource.Model;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Net.Http.Json;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Referential
{
    public class GetStringResourceTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Get_StringResource_Success_Response()
        {
            // Arrange
            string type = "general"; // Example type
            string key = "welcome_message"; // Example key
            string cultureCode = "en-US"; // Example culture code
            string requestUri = $"{ApiRouteConstants.StringResourceRoutes.GetByKey}?type={type}&key={key}&cultureCode={cultureCode}";

            // Act
            var response = await _client.GetAsync(requestUri);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<GetStringResourceByKeyResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.Equal(key, respData?.Key);
            Assert.Equal(type, respData?.Type);
            Assert.Equal(cultureCode, respData?.CultureCode);
            Assert.NotNull(respData?.Value); // Ensure that the resource value is returned
        }

        [Fact]
        public async Task Get_StringResource_Validator_Failure()
        {
            // Arrange
            string type = ""; // Invalid type (empty)
            string key = ""; // Invalid key (empty)
            string cultureCode = "en-US"; // Valid culture code
            string requestUri = $"{ApiRouteConstants.StringResourceRoutes.GetByKey}?type={type}&key={key}&cultureCode={cultureCode}";

            // Act
            var response = await _client.GetAsync(requestUri);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.NotNull(respError);
            Assert.Equal("Validation Error", respError?.ErrorType);
            Assert.Contains("type", respError?.Errors.Keys); // Ensure "type" validation is reported
            Assert.Contains("key", respError?.Errors.Keys); // Ensure "key" validation is reported
        }
    }
}
