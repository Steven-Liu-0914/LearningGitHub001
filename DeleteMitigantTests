using CACIB.CREW.Api.Core.Route;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Mitigants
{
    public class DeleteMitigantTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Delete_Mitigant_Success()
        {
            // Arrange: Prepare the list of Mitigant IDs to delete
            int[] mitigantIds = { 1, 2, 3 }; // Example IDs to delete

            var jsonContent = JsonConvert.SerializeObject(mitigantIds);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.MitigantRoutes.Mitigants, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<BaseResponse>(responseContent);

            // Assert: Check that the response status is 200 OK and validate the response data
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            // Add additional assertions if needed, such as checking response fields
        }

        [Fact]
        public async Task Delete_Mitigant_NotFound()
        {
            // Arrange: Prepare a non-existent Mitigant ID
            int[] mitigantIds = { 99999 }; // Example non-existent ID

            var jsonContent = JsonConvert.SerializeObject(mitigantIds);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.MitigantRoutes.Mitigants, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 404 Not Found
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal("Resource not found", respError?.ErrorType);
        }

        [Fact]
        public async Task Delete_Mitigant_BadRequest()
        {
            // Arrange: Prepare an invalid request (empty list of Mitigant IDs)
            int[] mitigantIds = { };

            var jsonContent = JsonConvert.SerializeObject(mitigantIds);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.MitigantRoutes.Mitigants, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 400 BadRequest
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Bad Request", respError?.ErrorType);
        }
    }
}
