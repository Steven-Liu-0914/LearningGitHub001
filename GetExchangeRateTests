using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.ExchangeRate
{
    public class GetExchangeRateTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetExchangeRateTests()
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetExchangeRate_ValidRequest_ReturnsExchangeRate()
        {
            // Arrange
            string validCurrency = "USD";
            DateTime validDate = DateTime.Now;

            // Act
            var response = await _client.GetAsync($"/api/exchange-rate?currency={validCurrency}&date={validDate:yyyy-MM-dd}");

            // Assert
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetExchangeRateResponse>();
            Assert.NotNull(result);
            Assert.Equal(validCurrency, result.Data.Currency);
            Assert.Equal(validDate.Date, result.Data.Date.Date);
        }

        [Fact]
        public async Task GetExchangeRate_InvalidCurrency_ReturnsNotFound()
        {
            // Arrange
            string invalidCurrency = "INVALID";

            // Act
            var response = await _client.GetAsync($"/api/exchange-rate?currency={invalidCurrency}");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetExchangeRate_MissingCurrency_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/exchange-rate");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
