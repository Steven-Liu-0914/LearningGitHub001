using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class GetClientHierarchyTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetClientHierarchyTests()
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetClientHierarchy_ValidId_ReturnsHierarchy()
        {
            // Arrange: Prepare valid client id
            long validClientId = 12345;

            // Act: Send GET request
            var response = await _client.GetAsync($"/api/simulation/client-hierarchy/{validClientId}");

            // Assert: Verify response
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetClientHierarchyResponse>();
            Assert.NotNull(result);
            Assert.Equal(validClientId, result.ClientId);
        }

        [Fact]
        public async Task GetClientHierarchy_InvalidId_ReturnsNotFound()
        {
            // Arrange: Use an invalid client id
            long invalidClientId = -1;

            // Act: Send GET request
            var response = await _client.GetAsync($"/api/simulation/client-hierarchy/{invalidClientId}");

            // Assert: Verify 404 response
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetClientHierarchy_UnauthorizedRequest_ReturnsUnauthorized()
        {
            // Arrange: Remove authorization header
            _client.DefaultRequestHeaders.Authorization = null;

            // Act: Send GET request
            var response = await _client.GetAsync("/api/simulation/client-hierarchy/12345");

            // Assert: Verify unauthorized response
            Assert.Equal(HttpStatusCode.Unauthorized, response.StatusCode);
        }
    }
}
