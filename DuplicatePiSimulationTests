#nullable disable

using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Simulation.Model;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class DuplicatePiSimulationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Duplicate_PI_Simulation_Success()
        {
            // Arrange: Provide valid duplicate simulation request data
            var requestBody = new DuplicateSimulationRequest
            {
                Id = 12345, // Example valid simulation ID
                Name = "Test PI Simulation" // Example valid name
            };

            var command = new DuplicatePiSimulationCommand(requestBody);

            // Act: Send the POST request to the API
            var response = await _client.PostAsync(ApiRouteConstants.SimulationRoutes.DuplicatePiSimulation,
                new StringContent(JsonConvert.SerializeObject(command), System.Text.Encoding.UTF8, "application/json"));

            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<BaseResponse>(responseContent);

            // Assert: Check that the response status is 200 OK and validate the response data
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.True(respData?.Data is bool && (bool)respData?.Data); // Example: assuming the data field is boolean indicating success
        }

        [Fact]
        public async Task Duplicate_PI_Simulation_NotFound()
        {
            // Arrange: Provide a non-existent simulation ID
            var requestBody = new DuplicateSimulationRequest
            {
                Id = 99999, // Example non-existent simulation ID
                Name = "NonExistent Simulation"
            };

            var command = new DuplicatePiSimulationCommand(requestBody);

            // Act: Send the POST request to the API
            var response = await _client.PostAsync(ApiRouteConstants.SimulationRoutes.DuplicatePiSimulation,
                new StringContent(JsonConvert.SerializeObject(command), System.Text.Encoding.UTF8, "application/json"));

            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 404 Not Found
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal("Simulation Not Found", respError?.ErrorType); // Example error message
        }

        [Fact]
        public async Task Duplicate_PI_Simulation_BadRequest()
        {
            // Arrange: Provide invalid data (e.g., empty name)
            var requestBody = new DuplicateSimulationRequest
            {
                Id = -1, // Example invalid simulation ID (negative value)
                Name = "" // Example invalid name (empty string)
            };

            var command = new DuplicatePiSimulationCommand(requestBody);

            // Act: Send the POST request to the API
            var response = await _client.PostAsync(ApiRouteConstants.SimulationRoutes.DuplicatePiSimulation,
                new StringContent(JsonConvert.SerializeObject(command), System.Text.Encoding.UTF8, "application/json"));

            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 400 BadRequest due to invalid parameters
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Bad Request", respError?.ErrorType); // Example error message
        }
    }
}
