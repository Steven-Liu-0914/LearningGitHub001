using CACIB.CREW.Api.Core.Route;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class DeleteSimulationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Delete_Simulation_Success()
        {
            // Arrange: Provide a valid simulation ID to delete
            long simulationId = 12345; // Example valid simulation ID

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.SimulationRoutes.DeleteSimulation + $"?id={simulationId}");
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<BaseResponse>(responseContent);

            // Assert: Check that the response status is 200 OK and validate the response data
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            // Add assertions based on the expected response
        }

        [Fact]
        public async Task Delete_Simulation_NotFound()
        {
            // Arrange: Provide a non-existent simulation ID
            long simulationId = 99999; // Example non-existent simulation ID

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.SimulationRoutes.DeleteSimulation + $"?id={simulationId}");
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 404 Not Found
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Equal("Resource not found", respError?.ErrorType);
        }

        [Fact]
        public async Task Delete_Simulation_BadRequest()
        {
            // Arrange: Provide an invalid simulation ID (e.g., negative ID)
            long simulationId = -1; // Example invalid ID

            // Act: Send the delete request to the API
            var response = await _client.DeleteAsync(ApiRouteConstants.SimulationRoutes.DeleteSimulation + $"?id={simulationId}");
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert: Check that the response status is 400 BadRequest
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Equal("Bad Request", respError?.ErrorType);
        }
    }
}
