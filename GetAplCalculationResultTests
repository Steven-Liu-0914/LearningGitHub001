using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Apl
{
    public class GetAplCalculationResultTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetAplCalculationResultTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetAplCalculationResult_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new LgdProjectRequest
            {
                // Provide a valid request for APL calculation
                ProjectId = 12345,  // Example valid project ID
                // Add other necessary fields as per the model
                AplType = "Standard",  // Example APL Type
                Amount = 1000000, // Example amount
                Currency = "EUR"
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/lgd/aplcalculation", request);

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<LgdProjectResponse>();
            Assert.NotNull(result);
            Assert.True(result.IsSuccess); // Assuming the response has an IsSuccess flag indicating success
        }

        [Fact]
        public async Task GetAplCalculationResult_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new LgdProjectRequest
            {
                // Invalid request (e.g., missing mandatory fields)
                ProjectId = 0, // Invalid project ID
                AplType = "",  // Invalid APL Type
                Amount = -100, // Invalid amount
                Currency = "EUR"
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/lgd/aplcalculation", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task GetAplCalculationResult_ProjectNotFound_ReturnsNotFound()
        {
            // Arrange
            var request = new LgdProjectRequest
            {
                ProjectId = 99999, // Assuming no project with this ID exists
                AplType = "Standard",  // Example APL Type
                Amount = 1000000,  // Example amount
                Currency = "EUR"
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/lgd/aplcalculation", request);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetAplCalculationResult_MissingRequiredFields_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new LgdProjectRequest
            {
                ProjectId = 12345, // Valid project ID
                // Missing or invalid required fields
                AplType = "",  // Invalid APL Type
                Amount = 0,  // Invalid amount (e.g., zero or negative)
                Currency = "EUR"
            };

            // Act
            var response = await _client.PostAsJsonAsync($"/api/lgd/aplcalculation", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
