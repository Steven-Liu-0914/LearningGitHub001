using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class UpdatePiSimulationAuthorizationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public UpdatePiSimulationAuthorizationTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task UpdatePiSimulationAuthorization_ValidRequest_ReturnsSuccessfulResponse()
        {
            // Arrange
            var request = new UpdateAuthorizationRequest
            {
                AuthorizationLevel = "Manager", // Example of valid data
                Rights = "ReadWrite" // Example of valid data
            };

            int simulationId = 12345; // Assuming we are updating authorization for this simulation

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/authorization/{simulationId}", request);

            // Assert
            response.EnsureSuccessStatusCode(); // Ensure the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<UpdateAuthorizationResponse>();
            Assert.NotNull(result);
            Assert.True(result.IsSuccess); // Assuming the response has an IsSuccess flag
        }

        [Fact]
        public async Task UpdatePiSimulationAuthorization_InvalidRequest_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdateAuthorizationRequest
            {
                AuthorizationLevel = "",  // Empty AuthorizationLevel, should be invalid
                Rights = "InvalidRights"  // Invalid Rights, should be invalid
            };

            int simulationId = 12345; // Assuming we are updating authorization for this simulation

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/authorization/{simulationId}", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task UpdatePiSimulationAuthorization_SimulationNotFound_ReturnsNotFound()
        {
            // Arrange
            var request = new UpdateAuthorizationRequest
            {
                AuthorizationLevel = "Manager",
                Rights = "ReadWrite"
            };

            int simulationId = 99999; // Assuming no simulation with this ID exists

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/authorization/{simulationId}", request);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task UpdatePiSimulationAuthorization_MissingRequiredFields_ReturnsBadRequest()
        {
            // Arrange
            var invalidRequest = new UpdateAuthorizationRequest
            {
                AuthorizationLevel = "Manager",
                Rights = ""  // Missing or empty Rights, should be invalid
            };

            int simulationId = 12345; // Assuming we are updating authorization for this simulation

            // Act
            var response = await _client.PutAsJsonAsync($"/api/simulation/authorization/{simulationId}", invalidRequest);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
