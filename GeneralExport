using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.GeneralExport.Model;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.GeneralExport
{
    public class GeneralExportTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Theory]
        [InlineData("ExportPiSimulationAuthorization")]
        [InlineData("ExportPiSimulationClient")]
        [InlineData("ExportPiSimulationMitigant")]
        [InlineData("ExportPiSimulationSchedule")]
        [InlineData("ExportSearchBeneficiary")]
        [InlineData("ExportSearchSimulation")]
        public async Task GeneralExport_Success(string category)
        {
            // Arrange
            var request = new
            {
                Category = category,
                SearchRequest = GenerateSearchRequest(category),
                HeaderItems = new List<HeaderInfo>
                {
                    new HeaderInfo { Name = "Column1", DisplayName = "Column 1" },
                    new HeaderInfo { Name = "Column2", DisplayName = "Column 2" }
                }
            };
            var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.GeneralExportRoutes.GeneralExport, content);
            var fileContentDisposition = response.Content.Headers.ContentDisposition;

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(fileContentDisposition);
            Assert.True(fileContentDisposition.FileName.EndsWith(".xlsx"));
        }

        [Fact]
        public async Task GeneralExport_BadRequest()
        {
            // Arrange
            var request = new
            {
                // Missing required fields to simulate a bad request
                SearchRequest = new { SomeInvalidField = "InvalidValue" }
            };
            var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.GeneralExportRoutes.GeneralExport, content);
            string responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Contains("Validation Error", responseContent); // Adjust based on the actual error response
        }

        [Fact]
        public async Task GeneralExport_NotFound()
        {
            // Arrange
            var request = new
            {
                Category = "NonExistentCategory", // Invalid category to simulate not found
                SearchRequest = new { SomeField = "Value" },
                HeaderItems = new List<HeaderInfo> { new HeaderInfo { Name = "Column1", DisplayName = "Column 1" } }
            };
            var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.GeneralExportRoutes.GeneralExport, content);
            string responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Contains("Category not found", responseContent); // Adjust based on the actual error response
        }

        private object GenerateSearchRequest(string category)
        {
            // Simulate search request payload based on the category
            return category switch
            {
                "ExportPiSimulationAuthorization" => new { SimulationId = 12345, Status = "Approved" },
                "ExportPiSimulationClient" => new { ClientId = "C12345", Entity = "Global" },
                "ExportPiSimulationMitigant" => new { MitigantId = 1, Status = "Active" },
                "ExportPiSimulationSchedule" => new { SimulationId = 12345, DateFrom = "2025-01-01", DateTo = "2025-12-31" },
                "ExportSearchBeneficiary" => new { BeneficiaryId = 67890, IsActive = true },
                "ExportSearchSimulation" => new { SimulationType = "TypeA", DateRange = new { From = "2025-01-01", To = "2025-12-31" } },
                _ => throw new ArgumentException("Invalid category", nameof(category))
            };
        }
    }
}
