using CACIB.CREW.Api.Core.Route;
using CREW.Core.Infrastructure.Models;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Apl
{
    public class DeletePiCalculationFlagTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task UncomputePI_Success()
        {
            // Arrange
            var deviceId = 1001; // Valid DeviceId
            var endpoint = $"{ApiRouteConstants.CalculationRoutes.ComputePi}/{deviceId}";

            // Act
            var response = await _client.DeleteAsync(endpoint);
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<BaseResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(result);
            Assert.True(result.Success); // Assuming BaseResponse has a Success flag
        }

        [Fact]
        public async Task UncomputePI_BadRequest()
        {
            // Arrange
            var deviceId = 0; // Invalid DeviceId
            var endpoint = $"{ApiRouteConstants.CalculationRoutes.ComputePi}/{deviceId}";

            // Act
            var response = await _client.DeleteAsync(endpoint);
            var responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.Contains("Validation Error", responseContent); // Adjust based on actual error message
        }

        [Fact]
        public async Task UncomputePI_NotFound()
        {
            // Arrange
            var deviceId = 9999; // Non-existent DeviceId
            var endpoint = $"{ApiRouteConstants.CalculationRoutes.ComputePi}/{deviceId}";

            // Act
            var response = await _client.DeleteAsync(endpoint);
            var responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.Contains("Device not found", responseContent); // Adjust based on actual error message
        }
    }
}
