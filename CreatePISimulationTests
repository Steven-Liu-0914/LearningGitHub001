using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Simulation.Model;
using CREW.Core.Models.Response;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class CreatePiSimulationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Create_PiSimulation_Success_Response()
        {
            // Arrange
            var request = new
            {
                Name = "Test Simulation",
                Description = "Simulation for PI testing",
                Amount = 1000.00M,
                Currency = "USD",
                ExchangeRate = 1.0M,
                BeneficiaryKycId = 123,
                BeneficiaryType = "Corporate",
                SimulationType = "PI"
            };
            var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.SimulationPiRoutes.CreatePiSimulation, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<BaseResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.Equal("Success", respData?.Status); // Adjust based on actual response structure
        }

        [Fact]
        public async Task Create_PiSimulation_BadRequest_Response()
        {
            // Arrange
            var request = new
            {
                // Missing required fields to simulate a bad request
                Description = "Simulation for PI testing"
            };
            var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.SimulationPiRoutes.CreatePiSimulation, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.NotNull(respError);
            Assert.Equal("Validation Error", respError?.ErrorType); // Adjust based on actual error structure
        }

        [Fact]
        public async Task Create_PiSimulation_NotFound_Response()
        {
            // Arrange
            var request = new
            {
                Name = "Test Simulation",
                Description = "Simulation for PI testing",
                Amount = 1000.00M,
                Currency = "USD",
                ExchangeRate = 1.0M,
                BeneficiaryKycId = 999999, // Non-existent KYC ID to trigger a not found
                BeneficiaryType = "Corporate",
                SimulationType = "PI"
            };
            var content = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.SimulationPiRoutes.CreatePiSimulation, content);
            string responseContent = await response.Content.ReadAsStringAsync();

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
            Assert.True(string.IsNullOrEmpty(responseContent)); // Adjust based on actual error handling
        }
    }
}
