using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Referential
{
    public class GetExternalFilteredReferentialByTypeTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetExternalFilteredReferentialByTypeTests()
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetFilteredReferentialByType_ValidRequest_ReturnsFilteredData()
        {
            // Arrange
            string[] validTypes = { "Currency", "Country" };
            bool isUkLabel = true;

            // Act
            var response = await _client.GetAsync($"/api/referential/filtered-by-type?types={string.Join(",", validTypes)}&isUkLabel={isUkLabel}");

            // Assert
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetExternalFilteredReferentialByTypeResponse>();
            Assert.NotNull(result);
            Assert.NotEmpty(result.Data);
        }

        [Fact]
        public async Task GetFilteredReferentialByType_InvalidTypes_ReturnsNotFound()
        {
            // Arrange
            string[] invalidTypes = { "InvalidType1", "InvalidType2" };
            bool isUkLabel = false;

            // Act
            var response = await _client.GetAsync($"/api/referential/filtered-by-type?types={string.Join(",", invalidTypes)}&isUkLabel={isUkLabel}");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetFilteredReferentialByType_MissingTypes_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/referential/filtered-by-type");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
