using CACIB.CREW.Api.Core.Route;
using CACIB.CREW.Api.Features.Beneficiary.Model;
using CREW.Core.Models.Response;
using Microsoft.AspNetCore.Mvc.Testing;
using Newtonsoft.Json;
using System.Net;
using System.Threading.Tasks;


public class CreateCreditFileTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client = factory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });

        [Fact]
        public async Task Create_CreditFile_Success_Response()
        {
            // Arrange
            var requestPayload = new
            {
                Name = "Test Credit File",
                InsiderList = true,
                ConfidentialityLevel = "High",
                RequestType = "TypeA",
                RequestFormat = "FormatA",
                BeneficiaryTypeMain = "Type1",
                WorkflowStatus = "Pending",
                CountrySearchType = "Global",
                FilterCountryCodes = new[] { "US", "FR" },
                FilterOption = "OptionA",
                FilterCategories = new[] { "Category1", "Category2" },
                ShowIsolatedCounterparties = "Yes",
                BlockReviewId = "BR123",
                BlockReviewName = "Block Review",
                Beneficiaries = new[]
                {
                    new { Id = 1, Name = "Beneficiary1" },
                    new { Id = 2, Name = "Beneficiary2" }
                }
            };

            var content = new StringContent(JsonConvert.SerializeObject(requestPayload), System.Text.Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.CreditFileRoutes.CreateCreditFile, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respData = JsonConvert.DeserializeObject<CreditFileResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.OK, response.StatusCode);
            Assert.NotNull(respData);
            Assert.Equal("Test Credit File", respData?.Name); // Adjust based on actual response structure
        }

        [Fact]
        public async Task Create_CreditFile_BadRequest_Response()
        {
            // Arrange
            var requestPayload = new { }; // Missing required fields

            var content = new StringContent(JsonConvert.SerializeObject(requestPayload), System.Text.Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.CreditFileRoutes.CreateCreditFile, content);
            string responseContent = await response.Content.ReadAsStringAsync();
            var respError = JsonConvert.DeserializeObject<ErrorResponse>(responseContent);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.NotNull(respError);
            Assert.Equal("Validation Error", respError?.ErrorType); // Adjust based on actual error structure
        }

        [Fact]
        public async Task Create_CreditFile_NotFound_Response()
        {
            // Arrange
            var requestPayload = new
            {
                Name = "NonExistent Credit File",
                InsiderList = false
            };

            var content = new StringContent(JsonConvert.SerializeObject(requestPayload), System.Text.Encoding.UTF8, "application/json");

            // Act
            var response = await _client.PostAsync(ApiRouteConstants.CreditFileRoutes.CreateCreditFile, content);

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }
    }
}
