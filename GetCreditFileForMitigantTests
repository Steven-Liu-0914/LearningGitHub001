using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Mitigants
{
    public class GetCreditFileForMitigantTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetCreditFileForMitigantTests()
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetCreditFileForMitigant_ValidRequest_ReturnsCreditFileData()
        {
            // Arrange
            long validCreditFileId = 12345;
            long validDeviceId = 67890;
            int validAuthorizationId = 98765;

            var request = new GetCreditFileDetailForMitigantRequest
            {
                CreditFileId = validCreditFileId,
                DeviceId = validDeviceId,
                AuthorizationId = validAuthorizationId
            };

            // Act
            var response = await _client.GetAsync($"/api/mitigants/creditfile?creditFileId={validCreditFileId}&deviceId={validDeviceId}&authorizationId={validAuthorizationId}");

            // Assert
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetCreditFileForMitigantResponse>();
            Assert.NotNull(result);
            Assert.Equal(validCreditFileId, result.CreditFileId);
            Assert.Equal(validDeviceId, result.DeviceId);
            Assert.Equal(validAuthorizationId, result.AuthorizationId);
        }

        [Fact]
        public async Task GetCreditFileForMitigant_InvalidRequest_ReturnsNotFound()
        {
            // Arrange
            long invalidCreditFileId = -1;
            long invalidDeviceId = -1;
            int invalidAuthorizationId = -1;

            // Act
            var response = await _client.GetAsync($"/api/mitigants/creditfile?creditFileId={invalidCreditFileId}&deviceId={invalidDeviceId}&authorizationId={invalidAuthorizationId}");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetCreditFileForMitigant_MissingParameters_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/mitigants/creditfile");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
