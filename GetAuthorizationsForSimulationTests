using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Simulation
{
    public class GetAuthorizationsForSimulationTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public GetAuthorizationsForSimulationTests()
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task GetAuthorizations_ValidRequest_ReturnsAuthorizations()
        {
            // Arrange
            long validDeviceId = 12345;

            // Act
            var response = await _client.GetAsync($"/api/simulation/authorizations?id={validDeviceId}&sortBy=id&isAscending=true&pageSize=10&pageIndex=0");

            // Assert
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<GetAuthorizationsResponse>();
            Assert.NotNull(result);
            Assert.Equal(validDeviceId, result.DeviceId);
            Assert.NotEmpty(result.Authorizations);
        }

        [Fact]
        public async Task GetAuthorizations_InvalidId_ReturnsNotFound()
        {
            // Arrange
            long invalidDeviceId = -1;

            // Act
            var response = await _client.GetAsync($"/api/simulation/authorizations?id={invalidDeviceId}");

            // Assert
            Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);
        }

        [Fact]
        public async Task GetAuthorizations_MissingId_ReturnsBadRequest()
        {
            // Act
            var response = await _client.GetAsync("/api/simulation/authorizations");

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
