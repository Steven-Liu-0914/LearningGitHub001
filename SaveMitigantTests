using System.Net;
using System.Net.Http.Json;
using Xunit;

namespace CACIB.CREW.IntegrationTests.Features.Mitigants
{
    public class SaveMitigantTests(CrewWebApplicationFactory<Program> factory) : IClassFixture<CrewWebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public SaveMitigantTests(CrewWebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient(new WebApplicationFactoryClientOptions
            {
                AllowAutoRedirect = false
            });
        }

        [Fact]
        public async Task SaveMitigant_ValidMitigant_ReturnsSuccessResponse()
        {
            // Arrange
            var mitigant = new MitigantDto
            {
                MitigantId = 1,
                Name = "Test Mitigant",
                // Add other necessary properties for the MitigantDto
            };

            // Act
            var response = await _client.PostAsJsonAsync("/api/mitigants", mitigant);

            // Assert
            response.EnsureSuccessStatusCode(); // Ensures the status code is 200 OK
            var result = await response.Content.ReadFromJsonAsync<BaseResponse>();
            Assert.NotNull(result);
            Assert.Equal("Success", result.Status); // Assuming BaseResponse has a 'Status' property
        }

        [Fact]
        public async Task SaveMitigant_InvalidMitigant_ReturnsBadRequest()
        {
            // Arrange
            var invalidMitigant = new MitigantDto
            {
                MitigantId = 0, // Invalid ID
                Name = "", // Invalid name
                // Add other properties that will make this request invalid
            };

            // Act
            var response = await _client.PostAsJsonAsync("/api/mitigants", invalidMitigant);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }

        [Fact]
        public async Task SaveMitigant_MissingMitigant_ReturnsBadRequest()
        {
            // Act
            var response = await _client.PostAsync("/api/mitigants", null);

            // Assert
            Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);
        }
    }
}
